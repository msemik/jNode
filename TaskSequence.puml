@startuml

actor UserApp

UserApp ->> TaskExecutor1: doAsync(task, callback)
TaskExecutor1 -> DefaultTaskReceiver1: doAsync(task, callback)
DefaultTaskReceiver1 -> TaskCoordinator1: onTaskReceivedEvent(event)
TaskCoordinator1 ->> WorkerPool1: submitTask(task)
alt WorkerPoolOverflow
    WorkerPool1 -> Distributor1: onWorkerPoolOverflowEvent(event)
    Distributor1 -> DelegationHandler1: handleDuringOnWorkerPoolOverflowEvent()
    DelegationHandler1 -> DelegationHandler1: delegateTasks()
    alt task.isExternal()
        alt externalTask.isOriginatedAt(destinationNode) "destinationNode == sourceNode"
            DelegationHandler1 -> TaskService1: sry(destinationNodeId, taskId)
            TaskService1 -> MessageGateway1: send(new Sry(taskId), destinationNodeId)
            MessageGateway1 ->> MessageGateway2: send(message)
            MessageGateway2 -> Distributor2: onSry(nodeId, taskId)
            Distributor2 ->> WorkerPool2: submitTask(task)
        else "destinationNode != sourceNode"
            DelegationHandler1 -> TaskService1: redirectTask(externalTask, destinationNodeId)
            TaskService1 -> MessageGateway1: send(new Redirect(destinationNodeId, externalTask.getTaskId()), externalTask.getSourceNodeId())
            MessageGateway1 ->> MessageGateway2: send(message)
            MessageGateway2 -> Distributor2: onRedirect(currentNodeId, destinationNodeId, taskId)
            alt workerPool.hasAvailableThreads()
                Distributor2 ->> WorkerPool2: submitTask(task)
            else
                Distributor2 -> TaskService2: delegateTask(task, destinationNodeId)
                TaskService2 -> MessageGateway2: send(new TaskDelegation(externalTask), destinationNodeId)
                MessageGateway2 ->>]: send(message)
            end
        end
    else
        DelegationHandler1 -> TaskService1: delegateTask(task, destinationNodeId)
        TaskService1 -> MessageGateway1: send(new TaskDelegation(externalTask), destinationNodeId)
        MessageGateway1 ->> MessageGateway2: send(message)
        MessageGateway2 -> Distributor2: onTaskDelegation(externalTask)
        Distributor2 -> JarHandler2: onTaskDelegation(externalTask)
        opt notRequestedYet(jar)
            JarHandler2 -> TaskService2: jarRequest(jar)
            TaskService2 -> MessageGateway2: send(new JarRequest(jar.getFileNameAsString()), jar.getNodeId())
            MessageGateway2 ->> MessageGateway1: send(message)
            MessageGateway1 -> Distributor1: onJarRequest(nodeId, jarFileName)
            Distributor1 -> JarHandler1: onJarRequest(nodeId, jarFileName)
            JarHandler1 -> TaskService1: jarDelivery(requesterNodeId, fileName, jarContent)
            TaskService1 -> MessageGateway1: send(new JarDelivery(jarContent, fileName), requesterNodeId)
            MessageGateway1 ->> MessageGateway2: send(message)
            MessageGateway2 -> Distributor2: onJarDelivery(nodeId, jarFileName, jar)
            Distributor2 -> JarHandler2: onJarDelivery(nodeId, jarFileName, jar)
        end
        JarHandler2 -> TaskCoordinator2: onTaskReceivedEvent(event)
        TaskCoordinator2 ->> WorkerPool2: submitTask(task)
        WorkerPool2 -> Distributor2: onTaskFinishedEvent(event)
        Distributor2 -> TaskService2: taskExecutionCompleted(externalTask, taskResultOrException)
        TaskService2 -> MessageGateway2: send(message)
        MessageGateway2 ->> MessageGateway1: send(message)
        MessageGateway1 -> Distributor1: onTaskExecutionCompleted(taskId, taskResultOrException)
        Distributor1 -> TaskCoordinator1: onTaskFinishedEvent(event)
    end
else
    WorkerPool1 -> TaskCoordinator1: onTaskFinishedEvent(event)
end
alt success
    TaskCoordinator1 ->> EventLoopThread1: submitTaskResult(taskResult)
    EventLoopThread1 -> EventLoopThread1: callback.onSuccess(taskResult)
else failure
    TaskCoordinator1 ->> EventLoopThread1: submitTaskFailure(exception)
    EventLoopThread1 -> EventLoopThread1: callback.onFailure(exception)
end

@enduml
