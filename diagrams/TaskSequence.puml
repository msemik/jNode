@startuml

actor UserApp

UserApp ->> TaskExecutor: doAsync(task, callback)
TaskExecutor -> DefaultTaskReceiver: doAsync(task, callback)
DefaultTaskReceiver -> TaskCoordinator: onTaskReceivedEvent(event)
TaskCoordinator ->> WorkerPool: submitTask(task)
alt WorkerPoolOverflow
    WorkerPool -> Distributor: onWorkerPoolOverflowEvent(event)
    Distributor -> DelegationHandler: handleDuringOnWorkerPoolOverflowEvent()
    DelegationHandler -> DelegationHandler: delegateTasks()
    alt task.isExternal()
        alt externalTask.isOriginatedAt(destinationNode) "destinationNode == sourceNode"
            DelegationHandler -> TaskService: sry(destinationNodeId, taskId)
            TaskService -> MessageGateway: send(new Sry(taskId), destinationNodeId)
            MessageGateway ->>] : send(message)
        else "destinationNode != sourceNode"
            DelegationHandler -> TaskService: redirectTask(externalTask, destinationNodeId)
            TaskService -> MessageGateway: send(new Redirect(destinationNodeId, taskId, sourceNodeId)
            MessageGateway ->>] : send(message)
        end
    else
        DelegationHandler -> TaskService: delegateTask(task, destinationNodeId)
        TaskService -> MessageGateway: send(new TaskDelegation(externalTask), destinationNodeId)
        MessageGateway ->>] : send(message)
        opt notRequestedYet(jar)
            MessageGateway <<-] : receive(message)
            MessageGateway -> Distributor: onJarRequest(nodeId, jarFileName)
            Distributor -> JarHandler: onJarRequest(nodeId, jarFileName)
            JarHandler -> TaskService: jarDelivery(requesterNodeId, fileName, jarContent)
            TaskService -> MessageGateway: send(new JarDelivery(jarContent, fileName), requesterNodeId)
            MessageGateway ->>] : send(message)
        end
        MessageGateway <<-] : receive(message)
        MessageGateway -> Distributor: onTaskExecutionCompleted(taskId, taskResultOrException)
        Distributor -> TaskCoordinator: onTaskFinishedEvent(event)
    end
else
    WorkerPool -> TaskCoordinator: onTaskFinishedEvent(event)
end
alt success
    TaskCoordinator ->> EventLoopThread: submitTaskResult(taskResult)
    EventLoopThread -> EventLoopThread: callback.onSuccess(taskResult)
else failure
    TaskCoordinator ->> EventLoopThread: submitTaskFailure(exception)
    EventLoopThread -> EventLoopThread: callback.onFailure(exception)
end

newpage onSry
[->> MessageGateway : receive(message)
MessageGateway -> Distributor: onSry(nodeId, taskId)
Distributor ->> WorkerPool: submitTask(task)

newpage onRedirect
[->> MessageGateway : receive(message)
MessageGateway -> Distributor: onRedirect(currentNodeId, destinationNodeId, taskId)
alt workerPool.hasAvailableThreads()
    Distributor ->> WorkerPool: submitTask(task)
else
    Distributor -> TaskService: delegateTask(task, destinationNodeId)
    TaskService -> MessageGateway: send(new TaskDelegation(externalTask), destinationNodeId)
    MessageGateway ->>]: send(message)
end

newpage onTaskDelegation
[->> MessageGateway : receive(message)
MessageGateway -> Distributor: onTaskDelegation(externalTask)
Distributor -> JarHandler: onTaskDelegation(externalTask)
opt notRequestedYet(jar)
    JarHandler -> TaskService: jarRequest(jar)
    TaskService -> MessageGateway: send(new JarRequest(jarFileName, nodeId)
    [<<- MessageGateway : send(message)
    [->> MessageGateway: receive(message)
    MessageGateway -> Distributor: onJarDelivery(nodeId, jarFileName, jar)
    Distributor -> JarHandler: onJarDelivery(nodeId, jarFileName, jar)
end
JarHandler -> TaskCoordinator: onTaskReceivedEvent(event)
TaskCoordinator ->> WorkerPool: submitTask(task)
WorkerPool -> Distributor: onTaskFinishedEvent(event)
Distributor -> TaskService: taskExecutionCompleted(externalTask, taskResultOrException)
TaskService -> MessageGateway: send(new TaskExecutionCompleted(taskResult, taskId, sourceNodeId)
[<<- MessageGateway : send(message)

@enduml
